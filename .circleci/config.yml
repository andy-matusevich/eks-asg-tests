---
version: 2.1

executors:
  docker_terraform:
    docker:
      - image: 'hashicorp/terraform:0.12.25'
    resource_class: 'small'
    environment:
      STATE_LOCK_TABLE: ${CIRCLE_PROJECT_REPONAME}-${CI_ENVIRONMENT}-tf-state-locks
    shell: /bin/sh -leo pipefail

orbs:
  aws-eks: circleci/aws-eks@0.2.7
  kubernetes: circleci/kubernetes@0.11.0

aliases:
  - &aws_infra_init
    name: aws | infra init
    command: |
      cd terraform/aws_infra
      terraform init \
        -backend-config="key=${CI_ENVIRONMENT}/${AWS_REGION}/aws_inra.tfstate" \
        -backend-config="bucket=${CIRCLE_PROJECT_REPONAME}" \
        -backend-config="region=${AWS_DEFAULT_REGION}"
  - &aws_infra_apps_init
    name: aws | infra apps init
    command: |
      cd terraform/aws_infra
      terraform init \
        -backend-config="key=${CI_ENVIRONMENT}/${AWS_REGION}/aws_infra_apps.tfstate" \
        -backend-config="bucket=${CIRCLE_PROJECT_REPONAME}" \
        -backend-config="region=${AWS_DEFAULT_REGION}"


jobs:

  aws_state:
    executor: docker_terraform
    working_directory: '~/repo'
    steps:
      - checkout
      - run:
          name: aws state | init
          command: |
            cd terraform/aws_state
            terraform init
      - run:
          name: aws state | install aws cli
          command: sh .circleci/aws-cli-install.sh
      - run:
          name: aws state | apply tf state s3 bucket
          command: |
            cd terraform/aws_state
            aws s3api get-bucket-location --bucket ${CIRCLE_PROJECT_REPONAME} >/dev/null 2>&1 && \
            echo -e "S3 bucket is already exists" || \
            terraform apply \
              -auto-approve \
              -lock=true \
              -input=false \
              -lock-timeout=30s \
              -refresh=true \
              -target=aws_s3_bucket.tfstate-storage-s3 \
              -var="state_region=${AWS_DEFAULT_REGION}" \
              -var="state_bucket=${CIRCLE_PROJECT_REPONAME}" \
              -var="state_lock_table=${STATE_LOCK_TABLE}"
      - run:
          name: aws state | apply lock dynamodb table
          command: |
            cd terraform/aws_state
            aws dynamodb describe-table --table-name ${STATE_LOCK_TABLE}  >/dev/null 2>&1 && \
            echo -e "DynamoDB table is already exists" || \
            terraform apply \
              -auto-approve \
              -lock=true \
              -input=false \
              -lock-timeout=30s \
              -refresh=true \
              -target=aws_dynamodb_table.tfstate-locks \
              -var="state_region=${AWS_REGION}" \
              -var="state_bucket=${CIRCLE_PROJECT_REPONAME}" \
              -var="state_lock_table=${STATE_LOCK_TABLE}"

  aws_infra:
    executor: docker_terraform
    working_directory: '~/repo'
    steps:
      - checkout
      - run: *aws_infra_init
      - run:
          name: aws infra | validate
          command: |
            cd terraform/aws_infra
            terraform validate
      - run:
          name: aws infra | plan
          command: |
            cd terraform/aws_infra
            terraform plan \
              -out=".terraform/aws_infra.tfplan" \
              -var="cluster_name=${CIRCLE_PROJECT_REPONAME}" \
              -var="environment=${CI_ENVIRONMENT}" \
              -var="region=${AWS_REGION}" \
              -var-file=${CI_ENVIRONMENT}.tfvars
      - run:
          name: aws infra | apply
          command: |
            cd terraform/aws_infra
            terraform apply \
              -auto-approve \
              -lock=true \
              -input=false \
              -lock-timeout=30s \
              -refresh=true \
              .terraform/aws_infra.tfplan
      - persist_to_workspace:
          root: '~/'
          paths:
            - 'repo/eks-asg-tests/terraform/*'
            - '.kube/*'

  aws_infra_apps:
    executor: docker_terraform
    working_directory: '~/repo'
    steps:
      - checkout
      - attach_workspace:
          at: '.'
      - command: mv -f .kube/ ~/
      - run: *aws_infra_apps_init
      - run:
          name: eks | install aws cli
          command: sh .circleci/aws-cli-install.sh
      - kubernetes/install
      - aws-eks/install-eksctl
      - aws-eks/update-kubeconfig-with-authenticator:
          aws-region: "${AWS_REGION}"
          cluster-name: "${CIRCLE_PROJECT_REPONAME}"
      - run:
          name: aws infra | plan
          command: |
            cd terraform/aws_infra_apps
            terraform plan \
            -out=".terraform/aws_infra_apps.tfplan" \
            -var="cluster_name=${CIRCLE_PROJECT_REPONAME}" \
            -var="environment=${CI_ENVIRONMENT}" \
            -var="region=${AWS_REGION}" \
            -var-file=${CI_ENVIRONMENT}.tfvars
      - run:
          name: aws infra | apply
          command: |
            cd terraform/aws_infra_apps
            terraform apply \
              -auto-approve \
              -lock=true \
              -input=false \
              -lock-timeout=30s \
              -refresh=true \
              .terraform/aws_infra_apps.tfplan


workflows:
  eks-prod:
    jobs:
      - aws_state:
          context: env-prod
          filters:
            branches:
              only: master
      - approve_prod:
          type: approval
          requires:
            - aws_state
          filters:
            branches:
              only: master
      - aws_infra:
          context: env-prod
          requires:
            - approve_prod
          filters:
            branches:
              only: master
      - aws_infra_apps:
          context: env-prod
          requires:
            - aws_infra
          filters:
            branches:
              only: master

  eks-staging:
    jobs:
      - aws_state:
          context: env-staging
          filters:
            branches:
              ignore: master
      - aws_infra:
          context: env-staging
          requires:
            - aws_state
          filters:
            branches:
              ignore: master
      - aws_infra_apps:
          context: env-staging
          requires:
            - aws_infra
          filters:
            branches:
              ignore: master
